---
name: Registry Testing

on:
  workflow_dispatch:
    inputs:
      rancher_version:
        description: "Rancher version"
        required: true

env:
  CLOUD_PROVIDER_VERSION: "5.95.0"
  HOSTNAME_PREFIX: tfp-registry
  LOCALS_PROVIDER_VERSION: "${{ vars.LOCALS_PROVIDER_VERSION }}"
  PACKAGE: registries
  RANCHER2_PROVIDER_VERSION: "${{ vars.RANCHER2_PROVIDER_VERSION }}"
  RKE_PROVIDER_VERSION: "${{ vars.RKE_PROVIDER_VERSION }}"
  SUITE: ^TestTfpRegistriesTestSuite$
  SUITE_TIMEOUT: 7h
  TIMEOUT: 30m

jobs:
  v2-11:
    if: (startsWith(inputs.rancher_version, 'v2.11.')) && !contains(inputs.rancher_version, '-rc') && !contains(inputs.rancher_version, '-hotfix') && contains(inputs.rancher_version, '-alpha')
    name: ${{ github.event.inputs.rancher_version }}
    runs-on: ubuntu-latest
    environment: alpha

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname
      
      - name: Get Release Qase ID
        id: get-release-qase-id
        uses: ./.github/actions/get-release-qase-id
        with:
          tag: ${{ inputs.rancher_version }}
          qase_test_run_id_2_11: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_11 }}"
          qase_test_run_id_2_10: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_10 }}"
          qase_test_run_id_2_9: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_9 }}"

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ steps.get-release-qase-id.outputs.id }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ secrets.AWS_REGION }}"

      - name: Retrieve and set ECR password
        id: get-ecr-password
        uses: ./.github/actions/get-ecr-password

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            privateRegistries:
              authConfigSecretName: "${{ secrets.AUTH_CONFIG_SECRET_NAME }}"
              insecure: true
              password: "${{ secrets.REGISTRY_PASSWORD }}"
              username: "${{ secrets.REGISTRY_USERNAME }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              registryRootSize: ${{ vars.AWS_ROOT_SIZE_REGISTRY}}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ github.event.inputs.rancher_version }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_11 }}${{ vars.RKE2_VERSION_SUFFIX }}"
            standaloneRegistry:
              assetsPath: "${{ secrets.ASSETS_PATH }}"
              registryName: "${{ secrets.REGISTRY_NAME }}"
              registryPassword: "${{ secrets.REGISTRY_PASSWORD }}"
              registryUsername: "${{ secrets.REGISTRY_USERNAME }}"
              ecrUsername: "${{ vars.ECR_USERNAME }}"
              ecrPassword: "${{ steps.get-ecr-password.outputs.password }}"
              ecrURI: "${{ secrets.ECR_URI }}"
              ecrAMI: "${{ secrets.ECR_AMI }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ vars.TERRAFORM_VERSION }}"
          terraform_wrapper: false

      - name: Run Registry Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.SUITE_TIMEOUT }}

      - name: Reporting Results to Qase
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ env.QASE_TEST_RUN_ID }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}

  v2-10:
    if: (startsWith(inputs.rancher_version, 'v2.10.')) && !contains(inputs.rancher_version, '-rc') && !contains(inputs.rancher_version, '-hotfix') && contains(inputs.rancher_version, '-alpha')
    name: ${{ github.event.inputs.rancher_version }}
    runs-on: ubuntu-latest
    needs: v2-11
    environment: staging-alpha

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Get Release Qase ID
        id: get-release-qase-id
        uses: ./.github/actions/get-release-qase-id
        with:
          tag: ${{ inputs.rancher_version }}
          qase_test_run_id_2_11: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_11 }}"
          qase_test_run_id_2_10: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_10 }}"
          qase_test_run_id_2_9: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_9 }}"

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ steps.get-release-qase-id.outputs.id }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ secrets.AWS_REGION }}"

      - name: Retrieve and set ECR password
        id: get-ecr-password
        uses: ./.github/actions/get-ecr-password

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            privateRegistries:
              authConfigSecretName: "${{ secrets.AUTH_CONFIG_SECRET_NAME }}"
              insecure: true
              password: "${{ secrets.REGISTRY_PASSWORD }}"
              username: "${{ secrets.REGISTRY_USERNAME }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              registryRootSize: ${{ vars.AWS_ROOT_SIZE_REGISTRY}}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherAgentImage: "${{ secrets.RANCHER_AGENT_IMAGE }}"
              rancherTagVersion: "${{ github.event.inputs.rancher_version }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_10 }}${{ vars.RKE2_VERSION_SUFFIX }}"
            standaloneRegistry:
              assetsPath: "${{ secrets.ASSETS_PATH }}"
              registryName: "${{ secrets.REGISTRY_NAME }}"
              registryPassword: "${{ secrets.REGISTRY_PASSWORD }}"
              registryUsername: "${{ secrets.REGISTRY_USERNAME }}"
              ecrUsername: "${{ vars.ECR_USERNAME }}"
              ecrPassword: "${{ steps.get-ecr-password.outputs.password }}"
              ecrURI: "${{ secrets.ECR_URI }}"
              ecrAMI: "${{ secrets.ECR_AMI }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ vars.TERRAFORM_VERSION }}"
          terraform_wrapper: false

      - name: Run Registry Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.SUITE_TIMEOUT }}

      - name: Reporting Results to Qase
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ env.QASE_TEST_RUN_ID }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}

  v2-9:
    if: (startsWith(inputs.rancher_version, 'v2.9.')) && !contains(inputs.rancher_version, '-rc') && !contains(inputs.rancher_version, '-hotfix') && contains(inputs.rancher_version, '-alpha')
    name: ${{ github.event.inputs.rancher_version }}
    runs-on: ubuntu-latest
    needs: v2-10
    environment: staging-alpha

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Get Release Qase ID
        id: get-release-qase-id
        uses: ./.github/actions/get-release-qase-id
        with:
          tag: ${{ inputs.rancher_version }}
          qase_test_run_id_2_11: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_11 }}"
          qase_test_run_id_2_10: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_10 }}"
          qase_test_run_id_2_9: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_9 }}"

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ steps.get-release-qase-id.outputs.id }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ secrets.AWS_REGION }}"

      - name: Retrieve and set ECR password
        id: get-ecr-password
        uses: ./.github/actions/get-ecr-password

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            privateRegistries:
              authConfigSecretName: "${{ secrets.AUTH_CONFIG_SECRET_NAME }}"
              insecure: true
              password: "${{ secrets.REGISTRY_PASSWORD }}"
              username: "${{ secrets.REGISTRY_USERNAME }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              registryRootSize: ${{ vars.AWS_ROOT_SIZE_REGISTRY}}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherAgentImage: "${{ secrets.RANCHER_AGENT_IMAGE }}"
              rancherTagVersion: "${{ github.event.inputs.rancher_version }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_9 }}${{ vars.RKE2_VERSION_SUFFIX }}"
            standaloneRegistry:
              assetsPath: "${{ secrets.ASSETS_PATH }}"
              registryName: "${{ secrets.REGISTRY_NAME }}"
              registryPassword: "${{ secrets.REGISTRY_PASSWORD }}"
              registryUsername: "${{ secrets.REGISTRY_USERNAME }}"
              ecrUsername: "${{ vars.ECR_USERNAME }}"
              ecrPassword: "${{ steps.get-ecr-password.outputs.password }}"
              ecrURI: "${{ secrets.ECR_URI }}"
              ecrAMI: "${{ secrets.ECR_AMI }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ vars.TERRAFORM_VERSION }}"
          terraform_wrapper: false

      - name: Run Registry Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.SUITE_TIMEOUT }}

      - name: Reporting Results to Qase
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ env.QASE_TEST_RUN_ID }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}