---
name: Sanity Upgrade Testing

on:
  schedule:
    - cron: "0 8 * * 1"
  workflow_dispatch:
    inputs:
      rancher_version:
        description: "Rancher tag version provided from check-rancher-tag workflow"
        required: true
      upgraded-rancher-version-2-12:
        description: "Upgraded Rancher version for v2.12.x"
        required: true
        default: "head"
      upgraded-rancher-version-2-11:
        description: "Upgraded Rancher version for v2.11.x"
        required: true
        default: "v2.11-head"
      upgraded-rancher-version-2-10:
        description: "Upgraded Rancher version for v2.10.x"
        required: true
        default: "v2.10-head"
      upgraded-rancher-version-2-9:
        description: "Upgraded Rancher version for v2.9.x"
        required: true
        default: "v2.9-head"
      qase-test-run-id-2-12:
        description: "Qase Test Run ID for v2.12.x"
        required: true
        default: "4512"
      qase-test-run-id-2-11:
        description: "Qase Test Run ID for v2.11.x"
        required: true
        default: "4541"
      qase-test-run-id-2-10:
        description: "Qase Test Run ID for v2.10.x"
        required: true
        default: "4542"
      qase-test-run-id-2-9:
        description: "Qase Test Run ID for v2.9.x"
        required: true
        default: "4540"

env:
  CLOUD_PROVIDER_VERSION: "5.95.0"
  HOSTNAME_PREFIX: "tfp-sanity-up"
  LOCALS_PROVIDER_VERSION: "${{ vars.LOCALS_PROVIDER_VERSION }}"
  PACKAGE: "sanity"
  RANCHER2_PROVIDER_VERSION: "${{ vars.RANCHER2_PROVIDER_VERSION }}"
  RKE_PROVIDER_VERSION: "${{ vars.RKE_PROVIDER_VERSION }}"
  SUITE: "^TestTfpSanityUpgradeRancherTestSuite$"
  TIMEOUT: "2h"

jobs:
  v2-12:
    if: ${{ github.event_name == 'schedule' }} || (startsWith(inputs.rancher_version, 'v2.12.'))
    name: ${{ vars.RELEASED_RANCHER_VERSION_2_12 }} -> ${{ github.event.inputs.rancher_version || github.event.inputs.upgraded-rancher-version-2-12 }}
    runs-on: ubuntu-latest
    environment: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set upgraded Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: UPGRADED_RANCHER_VERSION
          value: ${{ github.event.inputs.rancher_version || github.event.inputs.upgraded-rancher-version-2-12 || vars.RANCHER_VERSION_2_12_HEAD }}

      - name: Get Release Qase ID
        if: ${{ github.event.inputs.rancher_version }}
        id: get-release-qase-id
        uses: ./.github/actions/get-release-qase-id
        with:
          tag: ${{ github.event.inputs.rancher_version }}
          qase_test_run_id_2_11: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_11 }}"
          qase_test_run_id_2_10: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_10 }}"
          qase_test_run_id_2_9: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_9 }}"

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ steps.get-release-qase-id.outputs.id || (github.event_name == 'workflow_dispatch' && github.event.inputs.qase-test-run-id-2-12) || vars.QASE_DEFAULT_TEST_RUN_ID_2_12 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              windowsAMI: "${{ secrets.WINDOWS_AMI }}"
              windowsAWSUser: "${{ secrets.AWS_WINDOWS_USER }}" 
              windowsAWSPassword: "${{ secrets.AWS_WINDOWS_PASSWORD }}"
              windowsInstanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
              windowsKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ vars.RELEASED_RANCHER_VERSION_2_12 }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_12 }}${{ vars.RKE2_VERSION_SUFFIX}}"
              upgradedRancherChartRepository: "${{ secrets.UPGRADED_RANCHER_HELM_CHART_URL}}"
              upgradedRancherImage: "${{ secrets.UPGRADED_RANCHER_IMAGE }}"
              upgradedRancherRepo: "${{ secrets.UPGRADED_RANCHER_REPO }}"
              upgradedRancherTagVersion: "${{ vars.RANCHER_VERSION_2_12_HEAD}}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            nodeCount: ${{ vars.NODE_COUNT }}
            windowsNodeCount: ${{ vars.WINDOWS_NODE_COUNT }}
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Run Sanity Upgrade Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.TIMEOUT }}

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ steps.get-release-qase-id.outputs.id || github.event.inputs.qase-test-run-id-2-12 || vars.QASE_DEFAULT_TEST_RUN_ID_2_12 }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}

  v2-11:
    if: ${{ github.event_name == 'schedule' }} || (startsWith(inputs.rancher_version, 'v2.11.'))
    name: v2.11.2 -> ${{ github.event.inputs.upgraded-rancher-version-2-11 }}
    runs-on: ubuntu-latest
    environment: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set upgraded Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: UPGRADED_RANCHER_VERSION
          value: ${{ github.event.inputs.rancher_version || github.event.inputs.upgraded-rancher-version-2-11 || vars.RANCHER_VERSION_2_11_HEAD }}

      - name: Get Release Qase ID
        if: ${{ github.event.inputs.rancher_version }}
        id: get-release-qase-id
        uses: ./.github/actions/get-release-qase-id
        with:
          tag: ${{ github.event.inputs.rancher_version }}
          qase_test_run_id_2_11: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_11 }}"
          qase_test_run_id_2_10: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_10 }}"
          qase_test_run_id_2_9: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_9 }}"

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ steps.get-release-qase-id.outputs.id || (github.event_name == 'workflow_dispatch' && github.event.inputs.qase-test-run-id-2-11) || vars.QASE_DEFAULT_TEST_RUN_ID_2_11 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              windowsAMI: "${{ secrets.WINDOWS_AMI }}"
              windowsAWSUser: "${{ secrets.AWS_WINDOWS_USER }}" 
              windowsAWSPassword: "${{ secrets.AWS_WINDOWS_PASSWORD }}"
              windowsInstanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
              windowsKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ vars.RELEASED_RANCHER_VERSION_2_11 }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_11 }}${{ vars.RKE2_VERSION_SUFFIX}}"
              upgradedRancherChartRepository: "${{ secrets.UPGRADED_RANCHER_HELM_CHART_URL}}"
              upgradedRancherImage: "${{ secrets.UPGRADED_RANCHER_IMAGE }}"
              upgradedRancherRepo: "${{ secrets.UPGRADED_RANCHER_REPO }}"
              upgradedRancherTagVersion: "${{ vars.RANCHER_VERSION_2_11_HEAD }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            nodeCount: ${{ vars.NODE_COUNT }}
            windowsNodeCount: ${{ vars.WINDOWS_NODE_COUNT }}
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Run Sanity Upgrade Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.TIMEOUT }}

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ steps.get-release-qase-id.outputs.id || github.event.inputs.qase-test-run-id-2-11 || vars.QASE_DEFAULT_TEST_RUN_ID_2_11 }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}

  v2-10:
    if: ${{ github.event_name == 'schedule' }} || (startsWith(inputs.rancher_version, 'v2.10.'))
    name: v2.10.6 -> ${{ github.event.inputs.upgraded-rancher-version-2-10 }}
    runs-on: ubuntu-latest
    environment: upgrade-prime-staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set upgraded Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: UPGRADED_RANCHER_VERSION
          value: ${{ github.event.inputs.rancher_version || github.event.inputs.upgraded-rancher-version-2-10 || vars.RANCHER_VERSION_2_10_HEAD }}

      - name: Get Release Qase ID
        if: ${{ github.event.inputs.rancher_version }}
        id: get-release-qase-id
        uses: ./.github/actions/get-release-qase-id
        with:
          tag: ${{ github.event.inputs.rancher_version }}
          qase_test_run_id_2_11: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_11 }}"
          qase_test_run_id_2_10: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_10 }}"
          qase_test_run_id_2_9: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_9 }}"

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ steps.get-release-qase-id.outputs.id || (github.event_name == 'workflow_dispatch' && github.event.inputs.qase-test-run-id-2-10) || vars.QASE_DEFAULT_TEST_RUN_ID_2_10 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              windowsAMI: "${{ secrets.WINDOWS_AMI }}"
              windowsAWSUser: "${{ secrets.AWS_WINDOWS_USER }}" 
              windowsAWSPassword: "${{ secrets.AWS_WINDOWS_PASSWORD }}"
              windowsInstanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
              windowsKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherAgentImage: "${{ secrets.RANCHER_AGENT_IMAGE }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ vars.RELEASED_RANCHER_VERSION_2_10 }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_10 }}${{ vars.RKE2_VERSION_SUFFIX}}"
              upgradedRancherAgentImage: "${{ secrets.UPGRADED_RANCHER_AGENT_IMAGE }}"
              upgradedRancherChartRepository: "${{ secrets.UPGRADED_RANCHER_HELM_CHART_URL}}"
              upgradedRancherImage: "${{ secrets.UPGRADED_RANCHER_IMAGE }}"
              upgradedRancherRepo: "${{ secrets.UPGRADED_RANCHER_REPO }}"
              upgradedRancherTagVersion: "${{ vars.RANCHER_VERSION_2_10_HEAD }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            nodeCount: ${{ vars.NODE_COUNT }}
            windowsNodeCount: ${{ vars.WINDOWS_NODE_COUNT }}
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Run Sanity Upgrade Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.TIMEOUT }}

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ steps.get-release-qase-id.outputs.id || github.event.inputs.qase-test-run-id-2-10 || vars.QASE_DEFAULT_TEST_RUN_ID_2_10 }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}

  v2-9:
    if: ${{ github.event_name == 'schedule' }} || (startsWith(inputs.rancher_version, 'v2.9.'))
    name: v2.9.10 -> ${{ github.event.inputs.upgraded-rancher-version-2-9 }}
    runs-on: ubuntu-latest
    environment: upgrade-prime-staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set upgraded Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: UPGRADED_RANCHER_VERSION
          value: ${{ github.event.inputs.rancher_version || github.event.inputs.upgraded-rancher-version-2-9 || vars.RANCHER_VERSION_2_9_HEAD }}

      - name: Get Release Qase ID
        if: ${{ github.event.inputs.rancher_version }}
        id: get-release-qase-id
        uses: ./.github/actions/get-release-qase-id
        with:
          tag: ${{ github.event.inputs.rancher_version }}
          qase_test_run_id_2_11: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_11 }}"
          qase_test_run_id_2_10: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_10 }}"
          qase_test_run_id_2_9: "${{ vars.QASE_RELEASE_TEST_RUN_ID_2_9 }}"

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ steps.get-release-qase-id.outputs.id || (github.event_name == 'workflow_dispatch' && github.event.inputs.qase-test-run-id-2-9) || vars.QASE_DEFAULT_TEST_RUN_ID_2_9 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              windowsAMI: "${{ secrets.WINDOWS_AMI }}"
              windowsAWSUser: "${{ secrets.AWS_WINDOWS_USER }}" 
              windowsAWSPassword: "${{ secrets.AWS_WINDOWS_PASSWORD }}"
              windowsInstanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
              windowsKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherAgentImage: "${{ secrets.RANCHER_AGENT_IMAGE }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ vars.RELEASED_RANCHER_VERSION_2_9 }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ vars.RKE2_VERSION_2_9 }}${{ vars.RKE2_VERSION_SUFFIX}}"
              upgradedRancherAgentImage: "${{ secrets.UPGRADED_RANCHER_AGENT_IMAGE }}"
              upgradedRancherChartRepository: "${{ secrets.UPGRADED_RANCHER_HELM_CHART_URL}}"
              upgradedRancherImage: "${{ secrets.UPGRADED_RANCHER_IMAGE }}"
              upgradedRancherRepo: "${{ secrets.UPGRADED_RANCHER_REPO }}"
              upgradedRancherTagVersion: "${{ vars.RANCHER_VERSION_2_9_HEAD }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            nodeCount: ${{ vars.NODE_COUNT }}
            windowsNodeCount: ${{ vars.WINDOWS_NODE_COUNT }}
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Run Sanity Upgrade Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.TIMEOUT }}

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ steps.get-release-qase-id.outputs.id || github.event.inputs.qase-test-run-id-2-9 || vars.QASE_DEFAULT_TEST_RUN_ID_2_9 }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}
